#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function to perform BFS on the graph
void BFS(int start, const vector<vector<int>>& adjList, vector<bool>& visited) {
    queue<int> q; // Queue to manage the nodes to visit
    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int node = q.front(); // Get the front node
        q.pop();
        cout << node << " "; // Process the current node

        // Visit all adjacent nodes
        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int vertices, edges;
    cout << "Enter the number of vertices and edges: ";
    cin >> vertices >> edges;

    // Create an adjacency list for the graph
    vector<vector<int>> adjList(vertices);

    cout << "Enter the edges (u v):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graph
    }

    // Keep track of visited nodes
    vector<bool> visited(vertices, false);

    cout << "BFS Traversal:" << endl;
    for (int i = 0; i < vertices; i++) {
        if (!visited[i]) {
            BFS(i, adjList, visited);
        }
    }

    return 0;
}
