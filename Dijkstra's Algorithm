#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Function to implement Dijkstra's Algorithm
void dijkstra(int source, int vertices, vector<vector<pair<int, int>>>& adjList) {
    vector<int> dist(vertices, INT_MAX); // Distance array to store shortest distances
    dist[source] = 0; // Distance to the source is 0

    // Min-heap priority queue to store {distance, vertex} pairs
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second; // Get the vertex with the smallest distance
        pq.pop();

        // Explore neighbors
        for (auto& [v, weight] : adjList[u]) {
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight; // Update the distance
                pq.push({dist[v], v}); // Push the updated vertex into the priority queue
            }
        }
    }

    // Print the shortest distances
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < vertices; i++) {
        cout << i << "\t" << dist[i] << endl;
    }
}

int main() {
    int vertices, edges;
    cout << "Enter the number of vertices and edges: ";
    cin >> vertices >> edges;

    // Create an adjacency list for the graph
    vector<vector<pair<int, int>>> adjList(vertices);

    cout << "Enter the edges (u v weight):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;
        adjList[u].push_back({v, weight});
        adjList[v].push_back({u, weight}); // For undirected graph
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    dijkstra(source, vertices, adjList);

    return 0;
}
