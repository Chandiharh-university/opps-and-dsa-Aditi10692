#include <iostream>
#include <queue>
using namespace std;

// Recursive function to process elements in a queue
void processQueue(queue<int>& q) {
    // Base case: if the queue is empty, return
    if (q.empty()) {
        return;
    }

    // Get the front element
    int element = q.front();
    q.pop(); // Remove the front element from the queue

    // Print the element
    cout << "Processing element: " << element << endl;

    // Recursive call to process the rest of the queue
    processQueue(q);

    // Add the element back to the queue to restore its state
    q.push(element);
}

int main() {
    // Create and populate the queue
    queue<int> myQueue;
    myQueue.push(10);
    myQueue.push(20);
    myQueue.push(30);

    cout << "Initial queue state: ";
    queue<int> tempQueue = myQueue; // Temporary queue to display without modifying
    while (!tempQueue.empty()) {
        cout << tempQueue.front() << " ";
        tempQueue.pop();
    }
    cout << endl;

    // Process the queue recursively
    processQueue(myQueue);

    // Restore and display the queue state
    cout << "Queue state after recursive processing: ";
    while (!myQueue.empty()) {
        cout << myQueue.front() << " ";
        myQueue.pop();
    }
    cout << endl;

    return 0;
}
