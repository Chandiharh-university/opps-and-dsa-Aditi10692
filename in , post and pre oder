#include <iostream>
using namespace std;

// Definition of the Node structure
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a node
    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Function to perform in-order traversal
void inOrderTraversal(Node* root) {
    if (root != nullptr) {
        inOrderTraversal(root->left);  // Visit left subtree
        cout << root->data << " ";    // Visit root node
        inOrderTraversal(root->right); // Visit right subtree
    }
}

// Function to perform pre-order traversal
void preOrderTraversal(Node* root) {
    if (root != nullptr) {
        cout << root->data << " ";    // Visit root node
        preOrderTraversal(root->left);  // Visit left subtree
        preOrderTraversal(root->right); // Visit right subtree
    }
}

// Function to perform post-order traversal
void postOrderTraversal(Node* root) {
    if (root != nullptr) {
        postOrderTraversal(root->left);  // Visit left subtree
        postOrderTraversal(root->right); // Visit right subtree
        cout << root->data << " ";      // Visit root node
    }
}

// Main function
int main() {
    // Create a simple binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    cout << "In-order Traversal: ";
    inOrderTraversal(root);
    cout << endl;

    cout << "Pre-order Traversal: ";
    preOrderTraversal(root);
    cout << endl;

    cout << "Post-order Traversal: ";
    postOrderTraversal(root);
    cout << endl;

    return 0;
}
